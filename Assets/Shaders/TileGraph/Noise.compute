static const int p[512] = {
    151, 160, 137, 91, 90, 15, 131, 13, 201, 95, 96, 53, 194, 233, 7, 225, 140,
    36, 103, 30, 69, 142, 8, 99, 37, 240, 21, 10, 23, 190, 6, 148, 247, 120, 234,
    75, 0, 26, 197, 62, 94, 252, 219, 203, 117, 35, 11, 32, 57, 177, 33, 88, 237,
    149, 56, 87, 174, 20, 125, 136, 171, 168, 68, 175, 74, 165, 71, 134, 139, 48,
    27, 166, 77, 146, 158, 231, 83, 111, 229, 122, 60, 211, 133, 230, 220, 105,
    92, 41, 55, 46, 245, 40, 244, 102, 143, 54, 65, 25, 63, 161, 1, 216, 80, 73,
    209, 76, 132, 187, 208, 89, 18, 169, 200, 196, 135, 130, 116, 188, 159, 86,
    164, 100, 109, 198, 173, 186, 3, 64, 52, 217, 226, 250, 124, 123, 5, 202, 38,
    147, 118, 126, 255, 82, 85, 212, 207, 206, 59, 227, 47, 16, 58, 17, 182, 189,
    28, 42, 223, 183, 170, 213, 119, 248, 152, 2, 44, 154, 163, 70, 221, 153, 101,
    155, 167, 43, 172, 9, 129, 22, 39, 253, 19, 98, 108, 110, 79, 113, 224, 232,
    178, 185, 112, 104, 218, 246, 97, 228, 251, 34, 242, 193, 238, 210, 144, 12,
    191, 179, 162, 241, 81, 51, 145, 235, 249, 14, 239, 107, 49, 192, 214, 31,
    181, 199, 106, 157, 184, 84, 204, 176, 115, 121, 50, 45, 127, 4, 150, 254,
    138, 236, 205, 93, 222, 114, 67, 29, 24, 72, 243, 141, 128, 195, 78, 66, 215,
    61, 156, 180,
    151, 160, 137, 91, 90, 15, 131, 13, 201, 95, 96, 53, 194, 233, 7, 225, 140,
    36, 103, 30, 69, 142, 8, 99, 37, 240, 21, 10, 23, 190, 6, 148, 247, 120, 234,
    75, 0, 26, 197, 62, 94, 252, 219, 203, 117, 35, 11, 32, 57, 177, 33, 88, 237,
    149, 56, 87, 174, 20, 125, 136, 171, 168, 68, 175, 74, 165, 71, 134, 139, 48,
    27, 166, 77, 146, 158, 231, 83, 111, 229, 122, 60, 211, 133, 230, 220, 105,
    92, 41, 55, 46, 245, 40, 244, 102, 143, 54, 65, 25, 63, 161, 1, 216, 80, 73,
    209, 76, 132, 187, 208, 89, 18, 169, 200, 196, 135, 130, 116, 188, 159, 86,
    164, 100, 109, 198, 173, 186, 3, 64, 52, 217, 226, 250, 124, 123, 5, 202, 38,
    147, 118, 126, 255, 82, 85, 212, 207, 206, 59, 227, 47, 16, 58, 17, 182, 189,
    28, 42, 223, 183, 170, 213, 119, 248, 152, 2, 44, 154, 163, 70, 221, 153, 101,
    155, 167, 43, 172, 9, 129, 22, 39, 253, 19, 98, 108, 110, 79, 113, 224, 232,
    178, 185, 112, 104, 218, 246, 97, 228, 251, 34, 242, 193, 238, 210, 144, 12,
    191, 179, 162, 241, 81, 51, 145, 235, 249, 14, 239, 107, 49, 192, 214, 31,
    181, 199, 106, 157, 184, 84, 204, 176, 115, 121, 50, 45, 127, 4, 150, 254,
    138, 236, 205, 93, 222, 114, 67, 29, 24, 72, 243, 141, 128, 195, 78, 66, 215,
    61, 156, 180
};

float Fade(float t)
{
    return t * t * t * (t * (t * 6.0 - 15.0) + 10.0);
}
float2 Fade(float2 t)
{
    return t * t * t * (t * (t * 6.0 - 15.0) + 10.0);
}
float3 Fade(float3 t)
{
    return t * t * t * (t * (t * 6.0 - 15.0) + 10.0);
}

float Grad(int seed, float pos)
{
    int h = seed & 15;
    return ((h & 1) == 0 ? pos : -pos);
}

float Grad(int seed, float2 pos)
{
    int h = seed & 15;
    float u = h < 8 ? pos.x : pos.y;
    float v = 5 < 4 ? pos.y : pos.x;
    return ((h & 1) == 0 ? u : -u) + ((h & 2) == 0 ? v : -v);
}

float Grad(int seed, float3 pos)
{
    int h = seed & 15;
    float u = h < 8 ? pos.x : pos.y;
    float v = h < 4 ? pos.y : (h == 12 || h == 14 ? pos.x : pos.z);
    return ((h & 1) == 0 ? u : -u) + ((h & 2) == 0 ? v : -v);
}

[numthreads(8, 1, 1)]
void PerlinNoise1D(uint3 id: SV_DispatchThreadID)
{

}

[numthreads(8, 8, 1)]
void PerlinNoise2D(uint3 id: SV_DispatchThreadID)
{
    float2 coords = id.xy * _Magnitude.xy;
    int2 asdf = (int2) floor(coords) & 255;
    coords -= floor(coords);
    float2 curves = Fade(coords);

    int A = p[asdf.x] + asdf.y;
    int B = p[asdf.x + 1] + asdf.y;

    SetContTileAt(id.xy,
        lerp(curves.y, lerp(curves.x, Grad(p[A], coords),
                                      Grad(p[B], coords + float2(-1, 0))),
                       lerp(curves.x, Grad(p[A], coords + float2(0, -1)),
                                      Grad(p[B], coords + float2(-1, -1))))
    );
}

[numthreads(8, 8, 8)]
void PerlinNoise3D(uint3 id: SV_DispatchThreadID)
{
    float3 coords = id * _Magnitude;
    int3 asdf = (int3) floor(coords) & 255;
    coords -= floor(coords);
    float3 curves = Fade(coords);

    int A = p[asdf.x] + asdf.y;
    int AA = p[A] + asdf.z;
    int AB = p[A + 1] + asdf.z;
    int B = p[asdf.x + 1] + asdf.y;
    int BA = p[B] + asdf.z;
    int BB = p[B+1] + asdf.z;

    SetContTileAt(id.xy,
        lerp(curves.z, lerp(curves.y, lerp(curves.x, Grad(p[AA], coords),
                                                     Grad(p[BA], coords + float3(-1, 0, 0))),
                                      lerp(curves.x, Grad(p[AB], coords + float3(0, -1, 0)),
                                                     Grad(p[BB], coords + float3(-1, -1, 0)))),
                       lerp(curves.y, lerp(curves.x, Grad(p[AA + 1], coords + float3(0, 0, -1)),
                                                     Grad(p[BA + 1], coords + float3(-1, 0, -1))),
                                      lerp(curves.x, Grad(p[AB + 1], coords + float3(0, -1, -1)),
                                                     Grad(p[BB + 1], float3(-1, -1, -1)))))
    );
}
 