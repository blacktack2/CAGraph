#pragma kernel IterateLifeCells
#pragma kernel WhiteNoise1D
#pragma kernel WhiteNoise2D
#pragma kernel WhiteNoise3D
#pragma kernel ValueNoise1D
#pragma kernel ValueNoise2D
#pragma kernel ValueNoise3D
#pragma kernel FractalValueNoise1D
#pragma kernel FractalValueNoise2D
#pragma kernel FractalValueNoise3D
#pragma kernel PerlinNoise1D
#pragma kernel PerlinNoise2D
#pragma kernel PerlinNoise3D
#pragma kernel FractalPerlinNoise1D
#pragma kernel FractalPerlinNoise2D
#pragma kernel FractalPerlinNoise3D
#pragma kernel SimplexNoise1D
#pragma kernel SimplexNoise2D
#pragma kernel SimplexNoise3D
#pragma kernel FractalSimplexNoise1D
#pragma kernel FractalSimplexNoise2D
#pragma kernel FractalSimplexNoise3D
#pragma kernel VoronoiNoise2D
#pragma kernel HydraulicErosion
#pragma kernel FluvialErosion
#pragma kernel ThermalErosion

static const int MAXINT = 2147483648;

#define N  float2( 0.0,  1.0)
#define NE float2( 1.0,  1.0)
#define E  float2( 1.0,  0.0)
#define SE float2( 1.0, -1.0)
#define S  float2( 0.0, -1.0)
#define SW float2(-1.0, -1.0)
#define W  float2(-1.0,  0.0)
#define NW float2(-1.0,  1.0)

// Flag used to swap between using _TileMap0 and _TileMap1
// (false = read 0, write 1 | true = read 1, write 0)
bool _BufferFlag = false;

// Bounds of the current tilemap
int _ScaleX, _ScaleY;

// Seed for random number generation
int _Seed;
// Counter to keep track of the number of iterations
int _Iteration;

float3 _Frequency, _Offset;
int3 _IntOffset;

#define mod(x, y) ((x % y) + y) % y

#define DefineTileMap(name, type, default)\
RWStructuredBuffer<type> _TileMap##name##0;\
RWStructuredBuffer<type> _TileMap##name##1;\
/* Return the value of the tile at xy in the currently buffered array */\
type Get##name##TileAt(int2 xy)\
{\
    if (xy.x < _ScaleX && xy.y < _ScaleY)\
    {\
        if (_BufferFlag)\
            return _TileMap##name##1[xy.x + xy.y * _ScaleX];\
        else\
            return _TileMap##name##0[xy.x + xy.y * _ScaleX];\
    }\
    else\
    {\
        return default;\
    }\
}\
type GetClamp##name##TileAt(int2 xy)\
{\
    int2 uv = int2(clamp(xy.x, 0, _ScaleX - 1), clamp(xy.y, 0, _ScaleY - 1));\
    if (_BufferFlag)\
        return _TileMap##name##1[uv.x + uv.y * _ScaleX];\
    else\
        return _TileMap##name##0[uv.x + uv.y * _ScaleX];\
}\
type GetWrap##name##TileAt(int2 xy)\
{\
    int2 uv = int2(mod(xy.x, _ScaleX), mod(xy.y, _ScaleY));\
    if (_BufferFlag)\
        return _TileMap##name##1[uv.x + uv.y * _ScaleX];\
    else\
        return _TileMap##name##0[uv.x + uv.y * _ScaleX];\
}\
/* Set the value of the tile at xy in the currently buffered array */\
void Set##name##TileAt(int2 xy, type value)\
{\
    if (xy.x < _ScaleX && xy.y < _ScaleY)\
    {\
        if (_BufferFlag)\
            _TileMap##name##0[xy.x + xy.y * _ScaleX] = value;\
        else\
            _TileMap##name##1[xy.x + xy.y * _ScaleX] = value;\
    }\
}

DefineTileMap(Bool, int, 0)     // GetBoolTileAt() GetClampBoolTileAt SetBoolTileAt()
DefineTileMap(Cont, float, 0.0) // GetContTileAt() GetClampContTileAt SetContTileAt()
DefineTileMap(Uint, uint, 0u)   // GetUintTileAt() GetClampUintTileAt SetUintTileAt()

// Exponential function supporting negative x
float PowN(float x, float y)
{
    if (x > 0)
    {
        return pow(x, y);
    }
    else if ((uint)(-x) % 2 == 0)
    {
        return pow(-x, y);
    }
    else
    {
        return -pow(-x, y);
    }
}

uint Random1D(uint seed)
{
    uint state = seed * 74779640 + 2891336453;
    uint word = ((state >> ((state >> 28) + 4)) ^ state) * 277803737;
    return (word >> 22u) ^ word;
}
uint Random1D(uint2 seed)
{
    return Random1D(seed.x ^ Random1D(seed.y));
}
uint Random1D(uint3 seed)
{
    return Random1D(seed.x ^ Random1D(seed.y ^ Random1D(seed.z)));
}
uint2 Random2D(uint seed)
{
    uint x = Random1D(seed);
    uint y = Random1D(x);
    return uint2(x, y);
}
uint2 Random2D(uint2 seed)
{
    uint x = Random1D(seed);
    uint y = Random1D(x);
    return uint2(x, y);
}
uint2 Random2D(uint3 seed)
{
    uint x = Random1D(seed);
    uint y = Random1D(x);
    return uint2(x, y);
}
uint3 Random3D(uint seed)
{
    uint x = Random1D(seed);
    uint y = Random1D(x);
    uint z = Random1D(y);
    return uint3(x, y, z);
}
uint3 Random3D(uint2 seed)
{
    uint x = Random1D(seed);
    uint y = Random1D(x);
    uint z = Random1D(y);
    return uint3(x, y, z);
}
uint3 Random3D(uint3 seed)
{
    uint x = Random1D(seed);
    uint y = Random1D(x);
    uint z = Random1D(y);
    return uint3(x, y, z);
}

#include "CellularAutomata.cginc"
#include "Erosion.cginc"
#include "Noise.cginc"