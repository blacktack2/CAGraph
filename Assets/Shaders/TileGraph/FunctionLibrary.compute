#pragma kernel IterateLifeCells
#pragma kernel PerlinNoise1D
#pragma kernel PerlinNoise2D
#pragma kernel PerlinNoise3D
#pragma kernel FractalPerlinNoise1D
#pragma kernel FractalPerlinNoise2D
#pragma kernel FractalPerlinNoise3D
#pragma kernel VoronoiNoise2D

// Flattened tilemaps of integers with values 0 and 1 only
RWStructuredBuffer<int>   _TileMapBool0;
RWStructuredBuffer<int>   _TileMapBool1; 
// Flattened tilemaps of floats between 0 and 1 (inclusive)
RWStructuredBuffer<float> _TileMapCont0;
RWStructuredBuffer<float> _TileMapCont1;
// Flattened tilemaps of unsigned integers
RWStructuredBuffer<uint>  _TileMapUint0;
RWStructuredBuffer<uint>  _TileMapUint1;

// Flag used to swap between using _TileMap0 and _TileMap1
// (false = read 0, write 1 | true = read 1, write 0)
bool _BufferFlag = false;

// Bounds of the current tilemap
uint _ScaleX, _ScaleY;

// Seed for random number generation
int _Seed;

// Ruleset for Lifelike Cellular Automata
RWStructuredBuffer<int> _LifeRules;

// Noise scale
float3 _Magnitude;

float3 _Offset;

// Fractal Noise parameters
uint _Octaves;
RWStructuredBuffer<float> _Lacunarity, _Persistence;

/**
 * Return the value of the tile at xy in the currently buffered array
 */
int GetBoolTileAt(uint2 xy)
{
    if (xy.x < _ScaleX && xy.y < _ScaleY)
    {
        if (_BufferFlag)
            return _TileMapBool1[xy.x + xy.y * _ScaleX];
        else
            return _TileMapBool0[xy.x + xy.y * _ScaleX];
    }
    else
    {
        return 0;
    }
}
/**
 * Set the value of the tile at xy in the currently buffered array
 */
void SetBoolTileAt(uint2 xy, int value)
{
    if (xy.x < _ScaleX && xy.y < _ScaleY)
    {
        if (_BufferFlag)
            _TileMapBool0[xy.x + xy.y * _ScaleX] = value;
        else
            _TileMapBool1[xy.x + xy.y * _ScaleX] = value;
    }
}

/**
 * Return the value of the tile at xy in the currently buffered array
 */
float GetContTileAt(uint2 xy)
{
    if (xy.x < _ScaleX && xy.y < _ScaleY)
    {
        if (_BufferFlag)
            return _TileMapCont1[xy.x + xy.y * _ScaleX];
        else
            return _TileMapCont0[xy.x + xy.y * _ScaleX];
    }
    else
    {
        return 0.0;
    }
}
/**
 * Set the value of the tile at xy in the currently buffered array
 */
void SetContTileAt(uint2 xy, float value)
{
    if (xy.x < _ScaleX && xy.y < _ScaleY)
    {
        if (_BufferFlag)
            _TileMapCont0[xy.x + xy.y * _ScaleX] = value;
        else
            _TileMapCont1[xy.x + xy.y * _ScaleX] = value;
    }
}


/**
 * Return the value of the tile at xy in the currently buffered array
 */
uint GetUintTileAt(uint2 xy)
{
    if (xy.x < _ScaleX && xy.y < _ScaleY)
    {
        if (_BufferFlag)
            return _TileMapUint1[xy.x + xy.y * _ScaleX];
        else
            return _TileMapUint0[xy.x + xy.y * _ScaleX];
    }
    else
    {
        return 0;
    }
}
/**
 * Set the value of the tile at xy in the currently buffered array
 */
void SetUintTileAt(uint2 xy, uint value)
{
    if (xy.x < _ScaleX && xy.y < _ScaleY)
    {
        if (_BufferFlag)
            _TileMapUint0[xy.x + xy.y * _ScaleX] = value;
        else
            _TileMapUint1[xy.x + xy.y * _ScaleX] = value;
    }
}

uint RandomPCG(uint v)
{
    uint state = v * 74779640u + 2891336453u;
    uint word = ((state >> ((state >> 28u) + 4u)) ^ state) * 277803737u;
    return (word >> 22u) ^ word;
}
int2 RandomPCG(int2 v)
{
    v = v * 1664525u + 1013904223u;
    
    v.x += v.y * 1664525u;
    v.y += v.x * 1664525u;

    v ^= v >> 16u;
    
    v.x += v.y * 1664525u;
    v.y += v.x * 1664525u;

    v ^= v >> 16u;

    return v;
}
uint3 RandomPCG(uint3 v)
{
    v = v * 1664525u + 1013904223u;

    v.x += v.y * v.z;
    v.y += v.z * v.x;
    v.z += v.x * v.y;

    v ^= v >> 16u;

    v.x += v.y * v.z;
    v.y += v.z * v.x;
    v.z += v.x * v.y;

    return v;
}

// #include "CellularAutomata.compute"
// #include "Noise.compute"

/**
 * Return the number of neighbours in the Moore neighbourhood of the cell at xy
 */
uint CountNeighboursAt(uint2 xy)
{
    return GetBoolTileAt(xy + int2(-1, -1)) +
           GetBoolTileAt(xy + int2(-1,  0)) +
           GetBoolTileAt(xy + int2(-1,  1)) +
           GetBoolTileAt(xy + int2( 0, -1)) +
           GetBoolTileAt(xy + int2( 0,  1)) +
           GetBoolTileAt(xy + int2( 1, -1)) +
           GetBoolTileAt(xy + int2( 1,  0)) +
           GetBoolTileAt(xy + int2( 1,  1));
}

[numthreads(8, 8, 1)]
void IterateLifeCells(uint3 id: SV_DispatchThreadID)
{
    SetBoolTileAt(id.xy, _LifeRules[GetBoolTileAt(id.xy) * 9 + CountNeighboursAt(id.xy)]);
}


static const int p[512] = {
    151, 160, 137, 91, 90, 15, 131, 13, 201, 95, 96, 53, 194, 233, 7, 225, 140,
    36, 103, 30, 69, 142, 8, 99, 37, 240, 21, 10, 23, 190, 6, 148, 247, 120, 234,
    75, 0, 26, 197, 62, 94, 252, 219, 203, 117, 35, 11, 32, 57, 177, 33, 88, 237,
    149, 56, 87, 174, 20, 125, 136, 171, 168, 68, 175, 74, 165, 71, 134, 139, 48,
    27, 166, 77, 146, 158, 231, 83, 111, 229, 122, 60, 211, 133, 230, 220, 105,
    92, 41, 55, 46, 245, 40, 244, 102, 143, 54, 65, 25, 63, 161, 1, 216, 80, 73,
    209, 76, 132, 187, 208, 89, 18, 169, 200, 196, 135, 130, 116, 188, 159, 86,
    164, 100, 109, 198, 173, 186, 3, 64, 52, 217, 226, 250, 124, 123, 5, 202, 38,
    147, 118, 126, 255, 82, 85, 212, 207, 206, 59, 227, 47, 16, 58, 17, 182, 189,
    28, 42, 223, 183, 170, 213, 119, 248, 152, 2, 44, 154, 163, 70, 221, 153, 101,
    155, 167, 43, 172, 9, 129, 22, 39, 253, 19, 98, 108, 110, 79, 113, 224, 232,
    178, 185, 112, 104, 218, 246, 97, 228, 251, 34, 242, 193, 238, 210, 144, 12,
    191, 179, 162, 241, 81, 51, 145, 235, 249, 14, 239, 107, 49, 192, 214, 31,
    181, 199, 106, 157, 184, 84, 204, 176, 115, 121, 50, 45, 127, 4, 150, 254,
    138, 236, 205, 93, 222, 114, 67, 29, 24, 72, 243, 141, 128, 195, 78, 66, 215,
    61, 156, 180,
    151, 160, 137, 91, 90, 15, 131, 13, 201, 95, 96, 53, 194, 233, 7, 225, 140,
    36, 103, 30, 69, 142, 8, 99, 37, 240, 21, 10, 23, 190, 6, 148, 247, 120, 234,
    75, 0, 26, 197, 62, 94, 252, 219, 203, 117, 35, 11, 32, 57, 177, 33, 88, 237,
    149, 56, 87, 174, 20, 125, 136, 171, 168, 68, 175, 74, 165, 71, 134, 139, 48,
    27, 166, 77, 146, 158, 231, 83, 111, 229, 122, 60, 211, 133, 230, 220, 105,
    92, 41, 55, 46, 245, 40, 244, 102, 143, 54, 65, 25, 63, 161, 1, 216, 80, 73,
    209, 76, 132, 187, 208, 89, 18, 169, 200, 196, 135, 130, 116, 188, 159, 86,
    164, 100, 109, 198, 173, 186, 3, 64, 52, 217, 226, 250, 124, 123, 5, 202, 38,
    147, 118, 126, 255, 82, 85, 212, 207, 206, 59, 227, 47, 16, 58, 17, 182, 189,
    28, 42, 223, 183, 170, 213, 119, 248, 152, 2, 44, 154, 163, 70, 221, 153, 101,
    155, 167, 43, 172, 9, 129, 22, 39, 253, 19, 98, 108, 110, 79, 113, 224, 232,
    178, 185, 112, 104, 218, 246, 97, 228, 251, 34, 242, 193, 238, 210, 144, 12,
    191, 179, 162, 241, 81, 51, 145, 235, 249, 14, 239, 107, 49, 192, 214, 31,
    181, 199, 106, 157, 184, 84, 204, 176, 115, 121, 50, 45, 127, 4, 150, 254,
    138, 236, 205, 93, 222, 114, 67, 29, 24, 72, 243, 141, 128, 195, 78, 66, 215,
    61, 156, 180
};

float Fade(float t)
{
    return t * t * t * (t * (t * 6.0 - 15.0) + 10.0);
}
float2 Fade(float2 t)
{
    return t * t * t * (t * (t * 6.0 - 15.0) + 10.0);
}
float3 Fade(float3 t)
{
    return t * t * t * (t * (t * 6.0 - 15.0) + 10.0);
}

float Grad(int seed, float pos)
{
    int h = seed & 15;
    return ((h & 1) == 0 ? pos : -pos);
}

float Grad(int seed, float2 pos)
{
    int h = seed & 15;
    return ((h & 1) ? pos.x : -pos.x) + ((h & 2) ? pos.y : -pos.y);
}

float Grad(int seed, float3 pos)
{
    int h = seed & 15;
    float u = h < 8 ? pos.x : pos.y;
    float v = h < 4 ? pos.y : (h == 12 || h == 14 ? pos.x : pos.z);
    return ((h & 1) == 0 ? u : -u) + ((h & 2) == 0 ? v : -v);
}

float PerlinNoise(float pos)
{
    return 0.5;
}

float PerlinNoise(float2 pos)
{
    int2 icoords = ((int2) floor(pos)) & 255;
    float2 coords = pos - floor(pos);
    float2 curves = Fade(coords);

    int A = p[icoords.x    ] + icoords.y;
    int B = p[icoords.x + 1] + icoords.y;

    return lerp(lerp(Grad(p[A    ], coords),
                     Grad(p[B    ], coords + float2(-1,  0)), curves.x),
                lerp(Grad(p[A + 1], coords + float2( 0, -1)),
                     Grad(p[B + 1], coords + float2(-1, -1)), curves.x), curves.y);
}

float PerlinNoise(float3 pos)
{
    int3 icoords = (int3) floor(pos) & 255;
    float3 coords = pos - floor(pos);
    float3 curves = Fade(coords);

    int A  = p[icoords.x    ] + icoords.y;
    int AA = p[A            ] + icoords.z;
    int AB = p[A + 1        ] + icoords.z;

    int B  = p[icoords.x + 1] + icoords.y;
    int BA = p[B            ] + icoords.z;
    int BB = p[B + 1        ] + icoords.z;

    return lerp(lerp(lerp(Grad(p[AA    ], coords),
                          Grad(p[BA    ], coords + float3(-1,  0,  0)), curves.x),
                     lerp(Grad(p[AB    ], coords + float3( 0, -1,  0)),
                          Grad(p[BB    ], coords + float3(-1, -1,  0)), curves.x), curves.y),
                lerp(lerp(Grad(p[AA + 1], coords + float3( 0,  0, -1)),
                          Grad(p[BA + 1], coords + float3(-1,  0, -1)), curves.x),
                     lerp(Grad(p[AB + 1], coords + float3( 0, -1, -1)),
                          Grad(p[BB + 1], coords + float3(-1, -1, -1)), curves.x), curves.y), curves.z);
}

[numthreads(8, 1, 1)]
void PerlinNoise1D(uint3 id: SV_DispatchThreadID)
{
    SetContTileAt(id.xy, 0.5 + PerlinNoise(id.x * _Magnitude.x + _Offset.x) * 0.5);
}

[numthreads(8, 8, 1)]
void PerlinNoise2D(uint3 id: SV_DispatchThreadID)
{
    SetContTileAt(id.xy, 0.5 + PerlinNoise(id.xy * _Magnitude.xy + _Offset.xy) * 0.5);
}

[numthreads(8, 8, 8)]
void PerlinNoise3D(uint3 id: SV_DispatchThreadID)
{
    SetContTileAt(id.xy, 0.5 + PerlinNoise(id * _Magnitude + _Offset) * 0.5);
}

[numthreads(8, 1, 1)]
void FractalPerlinNoise1D(uint3 id: SV_DispatchThreadID)
{
    float pos = id.x * _Magnitude.x + _Offset.x;
    float value = PerlinNoise(pos);
    for (int octave = 0; octave < (int) _Octaves - 1; octave++)
    {
        value += PerlinNoise(pos * _Lacunarity[octave]) * _Persistence[octave];
    }
    SetContTileAt(id.xy, 0.5 + value * 0.5);
}

[numthreads(8, 8, 1)]
void FractalPerlinNoise2D(uint3 id: SV_DispatchThreadID)
{
    float2 pos = id.xy * _Magnitude.xy + _Offset.xy;
    float value = PerlinNoise(pos);
    for (int octave = 0; octave < (int) _Octaves - 1; octave++)
    {
        value += PerlinNoise(pos * _Lacunarity[octave]) * _Persistence[octave];
    }
    SetContTileAt(id.xy, 0.5 + value * 0.5);
}

[numthreads(8, 8, 8)]
void FractalPerlinNoise3D(uint3 id: SV_DispatchThreadID)
{
    float3 pos = id * _Magnitude + _Offset;
    float value = PerlinNoise(pos);
    for (int octave = 0; octave < (int) _Octaves - 1; octave++)
    {
        value += PerlinNoise(pos * _Lacunarity[octave]) * _Persistence[octave];
    }
    SetContTileAt(id.xy, 0.5 + value * 0.5);
}

[numthreads(8, 8, 1)]
void VoronoiNoise2D(uint3 id: SV_DispatchThreadID)
{
    float2 pos = id.xy * _Magnitude.xy + _Offset.xy;
    int2 ipos = floor(pos);
    float2 fpos = frac(pos);

    float minDist = 1.0;
    for (int x = -1; x <= 1; x++)
    {
        for (int y = -1; y <= 1; y++)
        {
            int2 neighbour = int2(x, y);
            
            float2 p = frac((float2) RandomPCG(ipos + neighbour) / 2147483648.0);
            float2 diff = neighbour + p - fpos;
            float dist = length(diff);

            minDist = min(minDist, dist);
        }
    }

    SetContTileAt(id.xy, minDist);
}
